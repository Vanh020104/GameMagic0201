// using UnityEngine;
// using UnityEngine.UI;
// using System.Collections.Generic;
// using DG.Tweening;

// public class LuckyPanelController : MonoBehaviour
// {
//     [Header("Card Setup")]
//     public GameObject cardPrefab;                // Prefab l√° b√†i
//     public Transform cardSpawnParent;            // N∆°i ch·ª©a c√°c l√° b√†i sinh ra
//     public Transform cardCenterPoint;            // V·ªã tr√≠ t·ª• b√†i (ch√≠nh gi·ªØa)
//     public Transform cardPointsRoot;             // G·ªëc ch·ª©a 9 ƒëi·ªÉm target (Point_0_0 ‚Üí Point_2_2)

//     [Header("Buttons")]
//     public Button buttonStart;                   // N√∫t b·∫Øt ƒë·∫ßu chia b√†i
//     public Button buttonReset;                   // N√∫t gom b√†i v·ªÅ l·∫°i t·ª•

//     private List<GameObject> cards = new();      // Danh s√°ch 9 l√° b√†i
//     private List<RectTransform> targetPoints = new(); // Danh s√°ch c√°c ƒëi·ªÉm ƒë√≠ch (t·ªça ƒë·ªô chia b√†i)
//     public GameObject fingerHint;
//     /// <summary>
//     /// H√†m kh·ªüi t·∫°o khi m·ªü panel ‚Äì t·∫°o b√†i, g√°n listener cho n√∫t
//     /// </summary>
//     void Start()
//     {
//         SpawnAllCards();

//         buttonStart.onClick.AddListener(() =>
//         {
//             DealCards();
//             HideHint();
//         });

//         buttonReset.onClick.AddListener(ResetCards);

//         for (int i = 0; i < cardPointsRoot.childCount; i++)
//         {
//             targetPoints.Add(cardPointsRoot.GetChild(i).GetComponent<RectTransform>());
//         }

//         ShowHint();
//     }


//     /// <summary>
//     /// Sinh 9 l√° b√†i t·∫°i v·ªã tr√≠ t·ª• b√†i ch√≠nh gi·ªØa
//     /// </summary>
//     public void SpawnAllCards()
//     {
//         cards.Clear();

//         for (int i = 0; i < 9; i++)
//         {
//             var card = Instantiate(cardPrefab, cardSpawnParent);
//             card.name = $"Card_{i}";

//             RectTransform rt = card.GetComponent<RectTransform>();
//             rt.anchoredPosition = cardCenterPoint.GetComponent<RectTransform>().anchoredPosition;

//             cards.Add(card);
//         }
//     }

//     /// <summary>
//     /// Chia 9 l√° b√†i ra 9 v·ªã tr√≠ Point_0_0 ‚Üí Point_2_2 theo d·∫°ng 3x3
//     /// </summary>
//     public void DealCards()
//     {
//         for (int i = 0; i < cards.Count; i++)
//         {
//             var card = cards[i].GetComponent<RectTransform>();
//             var target = targetPoints[i].anchoredPosition;

//             card.DOAnchorPos(target, 0.5f)
//                 .SetEase(Ease.OutBack)
//                 .SetDelay(i * 0.05f);
//         }
//     }

//     /// <summary>
//     /// Gom t·∫•t c·∫£ b√†i tr·ªü l·∫°i v·ªã tr√≠ t·ª• gi·ªØa m√†n h√¨nh
//     /// </summary>
//     public void ResetCards()
//     {
//         var center = cardCenterPoint.GetComponent<RectTransform>().anchoredPosition;

//         foreach (var cardGO in cards)
//         {
//             var rt = cardGO.GetComponent<RectTransform>();
//             rt.DOAnchorPos(center, 0.4f).SetEase(Ease.InBack);
//         }
//     }

//     // g·ªçi ng√≥n tay ch·ªâ
//     private void ShowHint()
//     {
//         fingerHint.SetActive(true);

//         RectTransform rt = fingerHint.GetComponent<RectTransform>();
//         Vector2 original = rt.anchoredPosition;

//         rt.DOAnchorPos(original + new Vector2(-20f, 20f), 0.5f)
//         .SetLoops(-1, LoopType.Yoyo)
//         .SetEase(Ease.InOutSine);
//     }


//     private void HideHint()
//     {
//         fingerHint.SetActive(false);
//         fingerHint.transform.DOKill(); // stop animation
//     }

// }
using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;
using DG.Tweening;

public class LuckyPanelController : MonoBehaviour
{
    [Header("Card Setup")]
    public GameObject cardPrefab;                // Prefab l√° b√†i
    public Transform cardSpawnParent;            // N∆°i ch·ª©a c√°c l√° b√†i sinh ra
    public Transform cardCenterPoint;            // V·ªã tr√≠ t·ª• b√†i (ch√≠nh gi·ªØa)
    public Transform cardPointsRoot;             // G·ªëc ch·ª©a 9 ƒëi·ªÉm target (Point_0_0 ‚Üí Point_2_2)

    [Header("Buttons")]
    public Button buttonStart;                   // N√∫t d√πng ƒë·ªÉ random vi·ªÅn s√°ng sau n√†y
    public Button buttonReset;                   // N√∫t gom b√†i v·ªÅ l·∫°i t·ª•

    public GameObject fingerHint;                // Icon ch·ªâ tay

    private List<GameObject> cards = new();      // Danh s√°ch c√°c l√° b√†i
    private List<RectTransform> targetPoints = new(); // Danh s√°ch c√°c ƒëi·ªÉm ƒë√≠ch (t·ªça ƒë·ªô chia b√†i)

    private bool hasDealt = false;
    private Vector2 fingerOriginalPos; 

    /// <summary>
    /// H√†m kh·ªüi t·∫°o khi m·ªü panel ‚Äì t·∫°o t·ª• b√†i, g√°n listener cho n√∫t
    /// </summary>
    void Start()
    {
        SpawnCenterCard();

        buttonReset.onClick.AddListener(ResetCards);

        // G√°n s·∫µn target points
        for (int i = 0; i < cardPointsRoot.childCount; i++)
        {
            targetPoints.Add(cardPointsRoot.GetChild(i).GetComponent<RectTransform>());
        }

        ShowHint();
    }

    /// <summary>
    /// Sinh 1 l√° t·ª• b√†i duy nh·∫•t ·ªü gi·ªØa, cho ph√©p click ƒë·ªÉ chia b√†i
    /// </summary>
    public void SpawnCenterCard()
    {
        cards.Clear();

        var card = Instantiate(cardPrefab, cardSpawnParent);
        card.name = $"Card_Tu";

        RectTransform rt = card.GetComponent<RectTransform>();
        rt.anchoredPosition = cardCenterPoint.GetComponent<RectTransform>().anchoredPosition;

        // L·∫•y button c√≥ s·∫µn trong prefab
        Button btn = card.GetComponent<Button>();
        if (btn != null)
        {
            btn.onClick.RemoveAllListeners();
            btn.onClick.AddListener(() =>
            {
                btn.interactable = false;    // Kh√¥ng cho click l·∫°i
                DealCards(card);             // B·∫Øt ƒë·∫ßu chia
                hasDealt = true;
                HideHint();                  // ·∫®n icon ch·ªâ tay
            });
        }

        cards.Add(card);
    }

    /// <summary>
    /// Chia b√†i ra 9 l√° b√†i t·∫°i v·ªã tr√≠ 3x3, t·ª´ v·ªã tr√≠ trung t√¢m
    /// </summary>
    public void DealCards(GameObject oldCard)
    {
        Destroy(oldCard); // Xo√° l√° t·ª• c≈©

        cards.Clear();

        for (int i = 0; i < 9; i++)
        {
            var card = Instantiate(cardPrefab, cardSpawnParent);
            card.name = $"Card_{i}";

            RectTransform rt = card.GetComponent<RectTransform>();
            rt.anchoredPosition = cardCenterPoint.GetComponent<RectTransform>().anchoredPosition;

            cards.Add(card);

            var target = targetPoints[i].anchoredPosition;
            rt.DOAnchorPos(target, 0.5f)
              .SetEase(Ease.OutBack)
              .SetDelay(i * 0.05f);
        }
    }

    /// <summary>
    /// Reset to√†n b·ªô b√†i v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu ‚Äì ·∫©n h·∫øt v√† t·∫°o l·∫°i 1 t·ª• b√†i
    /// </summary>
    public void ResetCards()
    {
        // Xo√° to√†n b·ªô l√° b√†i hi·ªán t·∫°i
        foreach (var card in cards)
        {
            if (card != null)
            {
                // Kill tween tr∆∞·ªõc khi destroy
                RectTransform rt = card.GetComponent<RectTransform>();
                rt.DOKill(); // D·ª´ng t·∫•t c·∫£ tween li√™n quan object n√†y

                Destroy(card);
            }
        }

        cards.Clear();

        // T·∫°o l·∫°i l√° t·ª• duy nh·∫•t
        SpawnCenterCard();

        // Hi·ªán icon ch·ªâ tay l·∫°i
        ShowHint();

        hasDealt = false;
    }



    /// <summary>
    /// Hi·ªán icon ng√≥n tay v√† l·∫Øc nh·∫π ƒë·ªÉ d·ª• nh·∫•n v√†o t·ª•
    /// </summary>
    private void ShowHint()
    {
        fingerHint.SetActive(true);

        RectTransform rt = fingerHint.GetComponent<RectTransform>();

        // üîí G√°n v·ªã tr√≠ g·ªëc 1 l·∫ßn duy nh·∫•t
        if (fingerOriginalPos == Vector2.zero)
            fingerOriginalPos = rt.anchoredPosition;

        rt.anchoredPosition = fingerOriginalPos;

        rt.DOAnchorPos(fingerOriginalPos + new Vector2(-20f, 20f), 0.5f)
            .SetLoops(-1, LoopType.Yoyo)
            .SetEase(Ease.InOutSine);
    }

    /// <summary>
    /// ·∫®n icon ch·ªâ tay
    /// </summary>
    private void HideHint()
    {
        fingerHint.SetActive(false);
        fingerHint.transform.DOKill(); // stop animation
    }
}
