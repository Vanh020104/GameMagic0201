using UnityEngine;
using TMPro;
using UnityEngine.UI;
using System.Collections;

public class MatchStatistics : MonoBehaviour
{
    public TMP_Text killText, timeText, goldText, gemText, keyText, battleLevelText, resultMessageText, topText;
    public Button doubleRewardButton;
    private bool hasClaimedDouble = false;
    public GameObject upgradeLevelRankPanel;
    private bool isRetrying = false;
    void Start()
    {
        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        killText.text = GameResultData.killCount.ToString();
        timeText.text = FormatTime(GameResultData.matchTime);
        goldText.text = GameResultData.gold.ToString();
        gemText.text = GameResultData.gem.ToString();
        keyText.text = GameResultData.key.ToString();
        battleLevelText.text = $"{GameResultData.battleLevel}";

        // C·ªông ph·∫ßn th∆∞·ªüng (ch·ªâ 1 l·∫ßn duy nh·∫•t ·ªü ƒë√¢y)
        GoldGemManager.Instance.AddGold(GameResultData.gold);
        GoldGemManager.Instance.AddGem(GameResultData.gem);

        GoldGemManager.Instance.AddKey(GameResultData.key);


        // G·∫Øn s·ª± ki·ªán x2 n·∫øu c√≥
        doubleRewardButton.onClick.AddListener(HandleDoubleRewardAd);
        // ·∫®n panel UpgradeLevelRank n·∫øu c√≥
        if (upgradeLevelRankPanel != null)
            upgradeLevelRankPanel.SetActive(false);

        DailyTaskBridge.Instance?.TryAddProgress("kill_1", GameResultData.killCount);
        DailyTaskBridge.Instance?.TryAddProgress("kill_10", GameResultData.killCount);

        if (GameResultData.battleLevel >= 5)
            DailyTaskBridge.Instance?.TryAddProgress("reach_level_5", 1);

        if (GameResultData.battleLevel >= 10)
            DailyTaskBridge.Instance?.TryAddProgress("reach_level_10", 1);


        // N·∫øu ƒë√£ xem qu·∫£ng c√°o x2
        if (hasClaimedDouble)
            DailyTaskBridge.Instance?.TryAddProgress("watch_ads");

        // N·∫øu ng∆∞·ªùi ch∆°i ƒë√£ ƒë·∫°t Top 1
        if (GameResultData.playerRank == 1)
        {
            DailyTaskBridge.Instance?.TryAddProgress("win_match");
            DailyTaskBridge.Instance?.TryAddProgress("win_3_match");
        }

        // üéØ Nhi·ªám v·ª• s·ªëng s√≥t theo th·ªùi gian
        int matchSeconds = Mathf.FloorToInt(GameResultData.matchTime);

        if (matchSeconds >= 60)
            DailyTaskBridge.Instance?.TryAddProgress("survive_60s", matchSeconds);

        if (matchSeconds >= 180)
            DailyTaskBridge.Instance?.TryAddProgress("survive_180s", matchSeconds);

        ShowRankMessage(); // hi·ªÉn th·ªã quote d·ª±a tr√™n playerRank
        topText.text = GetRankWithSuffix(GameResultData.playerRank); // hi·ªÉn th·ªã TOP 1, TOP 2...


        // B·∫Øt ƒë·∫ßu coroutine delay 1s ‚Üí show panel
        StartCoroutine(ShowUpgradePanelDelayed());
    }

    private IEnumerator ShowUpgradePanelDelayed()
    {
        yield return new WaitForSeconds(0.5f);
        if (upgradeLevelRankPanel != null)
            upgradeLevelRankPanel.SetActive(true);
    }


    private void HandleDoubleRewardAd()
    {
        if (hasClaimedDouble) return;

        AdManager.Instance.ShowRewardedAd(() =>
        {
            GoldGemManager.Instance.AddGold(GameResultData.gold);
            GoldGemManager.Instance.AddGem(GameResultData.gem);
            GoldGemManager.Instance.AddKey(GameResultData.key);


            // C·∫≠p nh·∫≠t l·∫°i UI sau khi c·ªông x2
            goldText.text = (GameResultData.gold * 2).ToString();
            gemText.text = (GameResultData.gem * 2).ToString();
            keyText.text = (GameResultData.key * 1).ToString();

            doubleRewardButton.interactable = false;
            hasClaimedDouble = true;
        });
    }




    string GetRankWithSuffix(int rank)
    {
        if (rank <= 0) return "-";

        if (rank % 100 >= 11 && rank % 100 <= 13)
            return $"TOP {rank}";

        switch (rank % 10)
        {
            case 1: return $"TOP {rank}";
            case 2: return $"TOP {rank}";
            case 3: return $"TOP {rank}";
            default: return $"TOP {rank}";
        }
    }

    string FormatTime(float t)
    {
        int min = Mathf.FloorToInt(t / 60);
        int sec = Mathf.FloorToInt(t % 60);
        return $"{min:D2}:{sec:D2}";
    }

    // void ShowRankMessage()
    // {
    //     int rank = GameResultData.playerRank;

    //     string[] top1Msgs = {
    //     "CHI·∫æN TH·∫ÆNG! G√Ä ƒê√É V√ÄO N·ªíI!",
    //     "Top 1 kh√¥ng ai c·∫£n n·ªïi!",
    //     "ƒê·ªânh c·ªßa ch√≥p, tr·∫≠n n√†y l√† c·ªßa b·∫°n!",
    //     "G√°nh team kh√¥ng m·ªôt v·∫øt x∆∞·ªõc!",
    // };

    //     string[] top2to5Msgs = {
    //     "Su√Ωt n·ªØa th√¥i... G√† g·∫ßn t·ªõi tay!",
    //     "Top cao th·∫≠t ƒë√≥, nh∆∞ng ch∆∞a ƒë·ªß g·∫Øt!",
    //     "G·ª•c tr∆∞·ªõc c·ª≠a thi√™n ƒë∆∞·ªùng...",
    //     "Thi·∫øu ch√∫t may m·∫Øn, nh∆∞ng tr√¨nh th√¨ c√≥!",
    //     "ƒê∆∞·ª£c ƒë·∫•y! Nh∆∞ng c√≤n ph·∫£i luy·ªán th√™m!"
    // };

    //     string[] top6to10Msgs = {
    //     "Kh√° ·ªïn, nh∆∞ng v·∫´n b·ªã out tr√¨nh!",
    //     "B·∫Øn ngon nh∆∞ng v·∫´n g√£y, ti·∫øc gh√™!",
    //     "Top gi·ªØa... ·ª™ th√¨ c≈©ng kh√¥ng t·ªá!",
    //     "Ch∆°i v·∫≠y l√† ƒë∆∞·ª£c r·ªìi, nh∆∞ng ch∆∞a n·ªïi b·∫≠t!",
    // };

    //     string[] top11to20Msgs = {
    //     "V√†o game l√†m n·ªÅn √†?",
    //     "V·∫´n ƒëang kh·ªüi ƒë·ªông th√¥i m√† ƒë√∫ng kh√¥ng?",
    //     "V·ª´a loot ƒë∆∞·ª£c c√¢y s√∫ng th√¨... die!",
    //     "G√† ch∆∞a k·ªãp g√°y, ng∆∞·ªùi ƒë√£ toang!",
    //     "Tr·∫≠n sau nh·ªõ b·∫≠t aim nha b·∫°n ∆°i!"
    // };

    //     if (rank == 1)
    //     {
    //         resultMessageText.text = GetRandom(top1Msgs);
    //         resultMessageText.color = new Color32(0, 255, 0, 255); // Xanh l√°
    //     }
    //     else if (rank <= 5)
    //     {
    //         resultMessageText.text = GetRandom(top2to5Msgs);
    //         resultMessageText.color = new Color32(255, 204, 0, 255); // V√†ng cam
    //     }
    //     else if (rank <= 10)
    //     {
    //         resultMessageText.text = GetRandom(top6to10Msgs);
    //         resultMessageText.color = new Color32(255, 136, 0, 255); // Cam s√°ng
    //     }
    //     else
    //     {
    //         resultMessageText.text = GetRandom(top11to20Msgs);
    //         resultMessageText.color = new Color32(255, 68, 68, 255); // ƒê·ªè h·ªìng
    //     }
    // }

    string GetRandom(string[] messages)
    {
        return messages[Random.Range(0, messages.Length)];
    }


    // public void RetryCurrentMap()
    // {
    //     if (GameData.SelectedMap != null)
    //     {
    //         Debug.Log($"üîÅ Retry map: {GameData.SelectedMap.mapName}");

    //         // D√πng Loading n·∫øu c√≥
    //         if (GlobalLoadingController.Instance != null)
    //             GlobalLoadingController.Instance.LoadSceneWithDelay("LayoutBattle", 2f);
    //         else
    //             UnityEngine.SceneManagement.SceneManager.LoadScene("LayoutBattle");
    //     }
    //     else
    //     {
    //         Debug.LogWarning("‚ö†Ô∏è GameData.SelectedMap is null. Can't retry!");
    //     }
    // }
    public void RetryCurrentMap()
    {
        if (isRetrying) return; // ‚õî Ch·ªëng spam n√∫t
        isRetrying = true;

        if (GameData.SelectedMap == null)
        {
            Debug.LogWarning("‚ö†Ô∏è GameData.SelectedMap is null. Can't retry!");
            isRetrying = false;
            return;
        }

        // L·∫•y s·ªë l·∫ßn ƒë√£ ch∆°i l·∫°i
        int retryCounter = PlayerPrefs.GetInt("RetryCounter", 0);
        retryCounter++;
        PlayerPrefs.SetInt("RetryCounter", retryCounter);
        PlayerPrefs.Save();

        Debug.Log($"üîÅ Retry count: {retryCounter}");

        bool requireAd = (retryCounter % 2 == 0);

        if (requireAd && Application.internetReachability != NetworkReachability.NotReachable)
        {
            Debug.Log("üì∫ Show rewarded ad before retrying...");
            AdManager.Instance.ShowRewardedAd(() =>
            {
                ReloadBattleScene();
                isRetrying = false;
            });
        }
        else
        {
            ReloadBattleScene();
            isRetrying = false;
        }
    }
    private void ReloadBattleScene()
    {
        Debug.Log($"üîÅ Reloading map: {GameData.SelectedMap.mapName}");

        if (GlobalLoadingController.Instance != null)
            GlobalLoadingController.Instance.LoadSceneWithDelay("LayoutBattle", 2f);
        else
            UnityEngine.SceneManagement.SceneManager.LoadScene("LayoutBattle");
    }



    void ShowRankMessage()
    {
        int rank = GameResultData.playerRank;

        string[] top1Msgs = {
            "VICTORY! Dinner is served!",
            "Top 1! Nobody even came close!",
            "Absolutely legendary performance!",
            "Carried the whole game without a scratch!",
            "Don‚Äôt ask why you won. Ask why they even tried!"
        };

        string[] top2to5Msgs = {
            "So close‚Ä¶ but no chicken!",
            "Great effort, but not quite enough!",
            "Knocked out at heaven‚Äôs gate!",
            "You‚Äôve got the skills, just need a bit of luck!",
            "Nice one! But greatness takes more!"
        };

        string[] top6to10Msgs = {
            "Decent, but still outplayed!",
            "Solid game, but not enough fire!",
            "Middle of the pack‚Ä¶ not bad!",
            "Could've been better. Could've been worse.",
            "You're improving, but you're not there yet!"
        };

        string[] top11to20Msgs = {
            "What was that? A warm-up match?",
            "Didn't even get to loot properly!",
            "Blink and you're dead!",
            "Were you even trying?",
            "Tip: The trigger goes *pew*, not *panic*."
        };

        if (rank == 1)
        {
            resultMessageText.text = GetRandom(top1Msgs);
            resultMessageText.color = new Color32(0, 255, 0, 255); // Green
        }
        else if (rank <= 5)
        {
            resultMessageText.text = GetRandom(top2to5Msgs);
            resultMessageText.color = new Color32(255, 204, 0, 255); // Gold
        }
        else if (rank <= 10)
        {
            resultMessageText.text = GetRandom(top6to10Msgs);
            resultMessageText.color = new Color32(255, 136, 0, 255); // Orange
        }
        else
        {
            resultMessageText.text = GetRandom(top11to20Msgs);
            resultMessageText.color = new Color32(255, 68, 68, 255); // Red
        }
    }

    // string GetRandom(string[] messages)
    // {
    //     return messages[Random.Range(0, messages.Length)];
    // }

}
